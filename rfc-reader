#!/bin/bash

# vim:set ts=2 sw=4 noexpandtab:
# <cesar@pissedoffadmins.com> 2013

# todo :
# add history with rfc number read - time stamped (function)

set -e
set -o pipefail
NAME=$(basename $0)

version()
{
  local VER="0.35"
cat <<EOL
${NAME} version ${VER}
Copyright (C) 2013 cesar@pissedoffadmins.com
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to redistribute it.

EOL
}

descrip()
{
  cat <<EOL
This is a simple script that will show you either the
name / subject of an RFC, let you read an RFC, or let you
search for an RFC.

EOL
}

usage()
{
  cat <<EOL
Usage: ${NAME} <name (-n)|read (-r)|search (-s)> <####> <bcp|fyi|ien|std|rfc>
       ${NAME} <latest>

Usage examples:
  ${NAME} name 3334 rfc     # displays RFC #3334 name
    ex: 3334 Policy-Based Accounting. T. Zseby, S. Zander, C. Carle. October
             2002. (Format: TXT=103014 bytes) (Status: EXPERIMENTAL)

  ${NAME} search <term> rfc # Displays index of matches with RFC #'s
    ex: ${NAME} search transport rfc

        0905 ISO Transport Protocol specification ISO DP 8073. ISO. April
             1984. (Format: TXT=249214 bytes) (Obsoletes RFC0892) (Status:
             UNKNOWN)

        0939 Executive summary of the NRC report on transport protocols for
             Department of Defense data networks. National Research Council.
             February 1985. (Format: TXT=42345 bytes) (Status: UNKNOWN)

  ${NAME} read 38 fyi       # read fyi #38

  ${NAME} latest            # shows list of latest rfc's

EOL
}

# temp file and trap statement - trap for clean end
case "$(uname 2>/dev/null)" in
  'Linux') TMP_FILE=$(mktemp --tmpdir rfc.$$.XXXXXXXXXX);;
  'Darwin') TMP_FILE=$(mktemp rfc.$$.XXXXXXXXXX);;
esac
trap "rm -rf ${TMP_FILE}" 0 1 2 3 15

# check if $1 != "search" || -s
case "${1}" in
  'search'|'-s') ;;
  'latest'|'-l') ;;
  'name'|'-n'|'read'|'-r')
    # check if $# -ge 2 && $2 is an integer
    [ $# -ge 2 ] || { version; descrip; usage; exit 1; }
    [ ${2} -ne 0 -o ${2} -eq 0 2>/dev/null ] ||
      { version; descrip; usage; exit 1; }
    # prepend zeros to make id number <####>
    FN=`printf "%04d" ${2} | xargs`
  ;;
  *) version; descrip; usage; exit 1 ;;
esac

# set $3 to either rfc (default if empty), bcp, fyi, ien, & std
case "${3}" in
  'bcp'|'BCP') ADDRESS="http://www.rfc-editor.org/rfc/bcp/bcp" ;;
  'fyi'|'FYI') ADDRESS="http://www.rfc-editor.org/rfc/fyi/fyi" ;;
  'ien'|'IEN') ADDRESS="http://www.rfc-editor.org/rfc/ien/ien" ;;
  'std'|'STD') ADDRESS="http://www.rfc-editor.org/rfc/std/std" ;;
  *) ADDRESS="http://www.rfc-editor.org/rfc/rfc" ;;
esac

# emulator / viewer settings and checks
printf -- "%s\n" "Here are the terminals available, choose one:"
TM=0
[[ -n $(command -v xterm) ]] && { echo xterm; TM=$((TM+1)); }
[[ -n $(command -v mrxvt) ]] && { echo mrxvt; TM=$((TM+1)); }
[[ -n $(command -v urxvt) ]] && { echo urxvt; TM=$((TM+1)); }

if [ $TM -eq 0 ]; then
  printf -- "Error: Terminal not found \n\n"; usage; exit 1
else
  printf "%s" "Enter term and press [ENTER]: "
  read EM
fi

case "${EM}" in
  'xterm') EM=$(which xterm 2>/dev/null)
    EM_ST="+sb -fg green -bg black -bd green -geometry 72x59 -title"
    EM_ST_LT="+sb -fg green -bg black -bd green -geometry 75x59 -title"
  ;;
  'mrxvt') EM=$(which mrxvt 2>/dev/null)
    EM_ST="-bl -hb -aht -fg green -bg black -bd green -g 72x59 -title"
    EM_ST_LT="-bl -hb -aht -fg green -bg black -bd green -g 75x59 -title"
  ;;
  'urxvt') EM=$(which urxvt 2>/dev/null)
    EM_ST="-fg green -bg black -bd green -g 72x59 -T"
    EM_ST_LT="-fg green -bg black -bd green -g 75x59 -T"
  ;;
esac
EM_TITLE="${NAME} - rfc${FN}.txt"
PAGER=`which less`

# begin working section of the script
case "${1}" in
  'latest'|'-l')
    printf -- "%s\n" "Downloading latest rfc list"
    curl -f -s http://www.rfc-editor.org/rfc/rfc-index-latest.txt | \
      awk '{line++;print}; /\f/ {for (i=line;i<=80;i++) print ""; line=0}' | \
      sed '/\f/d' > "${TMP_FILE}"
      printf -- "%s\n" "Showing latest rfc's"
      ${EM} ${EM_ST_LT} "${EM_TITLE}" -e ${PAGER} "${TMP_FILE}"
  ;;

  'name'|'-n')
    case "${FN}" in
      [0-9]|[0-9][0-9]|[0-9][0-9][0-9]|[0-9][0-9][0-9][0-9])
      [ $3 == "ien" ] && curl -s ${ADDRESS}-index.txt | awk '/'${2}'/ {print}'
      curl -s ${ADDRESS}-index.txt | \
        awk '/^'${FN}'/ {do_print=1} do_print==1 {print} NF==0 {do_print=0}'
      ;;
    *) printf -- "Error: unknown parameter '%s'\n" "$2"; usage; exit 1 ;;
    esac
  ;;

  'read'|'-r')
    if [ -z $(wget -q --spider ${ADDRESS}${2}.txt || echo $?) ]; then
      printf -- "%s\n" "Downloading ${FN}"
      curl -f -s ${ADDRESS}${2}.txt | \
        awk '{line++;print}; /\f/ {for (i=line;i<=58;i++) print "";line=0}' | \
        sed '/\f/d' > "${TMP_FILE}"
      printf -- "%s\n" "Showing ${FN}"
      ${EM} ${EM_ST} "${EM_TITLE}" -e ${PAGER} "${TMP_FILE}"
    else
      printf -- "%s\n" "File does not exist or is not TXT. Check RFC # : ${FN}"
      usage
    fi
  ;;

  'search'|'-s')
    F=`echo ${2} | head -c 1`
      FU=`echo ${F} | tr -s '[:lower:]' '[:upper:]'`
      FL=`echo ${F} | tr -s '[:upper:]' '[:lower:]'`
    CW=`echo ${2} | cut -c2-`
    curl -s ${ADDRESS}-index.txt | \
      awk 'BEGIN{FS="\n";RS="";ORS="\n\n"}/'[${FU}${FL}]${CW}'/' >"${TMP_FILE}"
    printf -- "%s\n" "Showing search for '${FL}${CW}'"
    ${EM} ${EM_ST} "${EM_TITLE}" -e ${PAGER} "${TMP_FILE}"
  ;;

  *) printf -- "\n"; usage; exit 1 ;;
esac
